// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceService.Data;

#nullable disable

namespace ServiceService.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20250817234652_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceService.Models.ServiceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ArizaAciklamasi")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirmaAdi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelefonNumarasi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrunTuru")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ServiceRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ad = "Ahmet",
                            ArizaAciklamasi = "Televizyon açılmıyor, güç düğmesine bastığımda hiçbir tepki vermiyor.",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Soyad = "Yılmaz",
                            TelefonNumarasi = "+90 555 123 4567",
                            UrunTuru = "Samsung TV",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            Ad = "Ayşe",
                            ArizaAciklamasi = "Laptop çok ısınıyor ve fan sesi çok yüksek çıkıyor. Performans düşüklüğü yaşıyoruz.",
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            FirmaAdi = "ABC Şirketi",
                            IsActive = true,
                            Soyad = "Demir",
                            TelefonNumarasi = "+90 212 555 1234",
                            UrunTuru = "HP Laptop",
                            UserType = 1
                        },
                        new
                        {
                            Id = 3,
                            Ad = "Mehmet",
                            ArizaAciklamasi = "Telefonun ekranında çizikler var ve batarya çok hızlı bitiyor.",
                            CreatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Soyad = "Kaya",
                            TelefonNumarasi = "+90 532 987 6543",
                            UrunTuru = "iPhone 14",
                            UserType = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
